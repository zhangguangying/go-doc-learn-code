声明、类型、语句、控制结构
    保持声明的一致性
        包级变量 ：只能通过 var 进行声明
            声明并初始化推荐方式 ：var s = '123' , 如果要指定类型，推荐这么写 ：var s = string('123')
            声明延迟初始化 ：var s string
            声明聚类 ：通过 var 将相同类型的变量放在一块声明
        局部变量
            比包级变量多了短变量声明的方式
            对于延迟初始化的变量，采用 var 的方式声明
            对于声明且显式初始化的变量，使用短变量声明
    使用无类型常量简化代码
        const 关键字声明常量，常量需要是整型、浮点型、字符串、字符型字面量
        Go 在处理不同类型的变量间的运算时，不支持隐式类型转换。
        如果常量显式声明了类型，那么也不可以直接跟不同类型的变量进行运算。但是无类型的常量可以进行不同类型的变量赋值与运算。
        const 语法提供了“隐式重复前一个非空表达式”的机制，常量定义的后面的行如果没有显式给予初始赋值，Go 编译器将为其隐式使用前面最近一行的赋值。
        iota : 是 Go 语言的一个预定义标识符，表示在 const 声明块中，每一行在块中的偏移量，从 0 开始。它与上面的特性“隐式重复前一个非空表达式”结合，可以灵活定义任意的常量值。
               可以通过 _ 让 iota 空加 ，得到自己想要的顺序
    尽量定义零值可用的类型
        